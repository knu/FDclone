#
#	Makefile for fd
#

TITLE	= FD-
TOPDIR	= \\usr\\local
BINDIR	= $(TOPDIR)\\bin
MANDIR	= $(TOPDIR)\\man\\man$(MANSEC)
CATDIR	= $(TOPDIR)\\man\\cat$(MANSEC)
DEFRC	= \\etc\\fdrc
DOSRC	= ~FD\\fdrc
INSTALL	= cp -p
CHMOD	= chmod
MANSEC	= 1

SRC	= main.c term.c pathname.c libc.c input.c shell.c info.c \
	dosdisk.c dosemu.c \
	unixdisk.c unixemu.c \
	rockridg.c builtin.c parse.c \
	kanji.c file.c apply.c archive.c tree.c command.c browse.c \
	kanjicnv.c mkfuncno.c expfunc.c
HEADER	= fd.h machine.h types.h kctype.h term.h pathname.h \
	dosdisk.h \
	unixdisk.h unixemu.h \
	func.h functabl.h

DOC	= README HISTORY FAQ TECHKNOW Install ToAdmin
MANSRC	= fd.man
MANCAT	= fd.cat
MANSEC	= 1
RUNCOM	= fdrc
ARGS	= object.arg

JSRCS	= $(DOC) kanji.hin $(MANSRC) $(MANCAT)
ESRCS	= Configur Makefile Makefile.in $(SRC) $(HEADER) \
	makefile.gpc makefile.lpc \
	makefile.dpc makefile.dpc \
	makefile.g98 makefile.l98 \
	config.hin mkmfsed.c mkmfdosg.sed mkmfdosd.sed mkmfdosl.sed \
	version.h _fdrc _fdrc.dif
SOURCES	= $(JSRCS) $(ESRCS)

CC	= gcc
CPP	= cpp
SED	= sed
PROGRAM	= fd
OBJ1	= main.o term.o pathname.o libc.o \
	input.o shell.o info.o
OBJ2	= unixemu.o unixdisk.o \
	rockridg.o builtin.o parse.o
OBJ3	= kanji.o file.o apply.o archive.o \
	tree.o command.o browse.o

LDFLAGS	= -lpc  
CFLAGS	= -DFD -DPC98 -DDEFRUNCOM='"'$(DOSRC)'"' -O

.SUFFIXES: .h .c .o .exe

############################################################
#	Dependency Rules
############################################################

goal:	$(PROGRAM).exe $(PROGRAM).$(MANSEC)

$(PROGRAM).exe: $(OBJ1) $(OBJ2) $(OBJ3) $(ARGS)
	$(CC) $(CFLAGS) -o $@ @$(ARGS) $(LDFLAGS)
	@ren $@ $(PROGRAM)
	@aout2exe $(PROGRAM)
	@del $(PROGRAM)

$(ARGS): $(OBJ1) $(OBJ2) $(OBJ3)
	@echo $(OBJ1) > $(ARGS)
	@echo $(OBJ2) >> $(ARGS)
	@echo $(OBJ3) >> $(ARGS)

.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $*.c -o $@

############################################################
# kanji using module

kanji.h: kanjicnv.exe kanji.hin
	.\\kanjicnv.exe -s   kanji.hin $@

$(PROGRAM).$(MANSEC): kanjicnv.exe $(MANSRC)
	.\\kanjicnv.exe -s  $(MANSRC) $@

$(PROGRAM).$(MANSEC)c: kanjicnv.exe $(MANCAT)
	.\\kanjicnv.exe -s $(MANCAT) $@

$(PROGRAM).doc: kanjicnv.exe $(MANCAT)
	.\\kanjicnv.exe -s -b $(MANCAT) $@

history.doc: kanjicnv.exe HISTORY
	.\\kanjicnv.exe -s HISTORY $@

kanjicnv.exe: kanjicnv.c
	$(CC) $(CFLAGS) -o $@ kanjicnv.c
	@ren $@ kanjicnv
	@aout2exe kanjicnv
	@del kanjicnv


############################################################
# function list using module

funcno.h: mkfuncno.exe functabl.h fd.h config.h
	-$(CPP) -DCPP functabl.h | .\\mkfuncno.exe - $@

mkfuncno.exe: mkfuncno.c
	$(CC) $(CFLAGS) -o $@ mkfuncno.c
	@ren $@ mkfuncno
	@aout2exe mkfuncno
	@del mkfuncno

config.h: config.hin
	copy config.hin config.h


############################################################
# to install all

install: $(PROGRAM).exe $(PROGRAM).$(MANSEC)
	$(INSTALL) $(PROGRAM).exe $(BINDIR)
	$(CHMOD) a+rx $(BINDIR)\\$(PROGRAM).exe
	$(INSTALL) $(PROGRAM).$(MANSEC) $(MANDIR)\\$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(MANDIR)\\$(PROGRAM).$(MANSEC)
	-if [ -f $(RUNCOM) ]; then \
		$(INSTALL) $(RUNCOM) $(DEFRC); \
		$(CHMOD) a+r $(DEFRC); \
	fi

catman: $(PROGRAM).$(MANSEC)c
	$(INSTALL) $(PROGRAM).$(MANSEC)c $(CATDIR)\\$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(CATDIR)\\$(PROGRAM).$(MANSEC)

catman-b: $(PROGRAM).doc
	$(INSTALL) $(PROGRAM).doc $(CATDIR)\\$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(CATDIR)\\$(PROGRAM).$(MANSEC)

compman: catman
	compress -f $(CATDIR)\\$(PROGRAM).$(MANSEC)

compman-b: catman-b
	compress -f $(CATDIR)\\$(PROGRAM).$(MANSEC)


############################################################
# to make dependency

depend: $(SRC) kanji.h funcno.h
	mv Makefile.in Makefile.in.bak
	makedepend -s "# DO NOT DELETE THIS LINE -- make depend depends on it."\
		-f Makefile.tmp -- $(CFLAGS) -- $(SRC)
	rm -f Makefile.tmp.bak
	$(SED) -e '\\^# DO NOT DELETE THIS LINE\\,$$d' Makefile.in.bak\
		> Makefile.in
	echo "# DO NOT DELETE THIS LINE -- make depend depends on it."\
		>> Makefile.in
	$(SED) -e '1,\\^# DO NOT DELETE THIS LINE\\d'\
		-e 's\\\\\[^ ]* *\\\\g'\
		-e 's\\\.o\\\_\_OBJ\_\_\\g'\
		-e 's\\ *$$\\\\'\
		-e '\\: *$$\\d' Makefile.tmp >> Makefile.in
	rm -f Makefile.in.bak Makefile.tmp


############################################################
# to make configuration file manually

config: Configur expfunc.c
	-if (echo 't() { echo $1; }; t test' | $(SHELL) >\\dev\\null 2>&1); then \
		$(SED) "2,3d" Configur | $(SHELL) > config.h; \
	else \
		if [ ! -f expfunc ]; then \
			$(CC) $(CFLAGS) -o expfunc expfunc.c; \
		fi; \
		$(SED) "2,3d" Configur | .\\expfunc | $(SHELL) > config.h; \
	fi


############################################################
# for programer's maintenance

GETVER	= HEAD="`tail -1 version.h`";\
	VER=`expr "$$HEAD" : '.*\([0-9][0-9]*\.[0-9a-z\-]*\).*'`

tar: $(SOURCES)
	($(GETVER);\
	tar cvof $(TITLE)"$$VER".tar $(SOURCES);\
	compress -f $(TITLE)"$$VER".tar)

lzh: $(SOURCES)
	($(GETVER);\
	-rm -f $(TITLE)"$$VER".lzh;\
	lha a $(TITLE)"$$VER".lzh $(SOURCES))

shar: $(SOURCES)
	($(GETVER);\
	-rm -f $(TITLE)$$VER.shar.[0-9]0-9];\
	shar -L50 -apc -n $(TITLE)"$$VER" -o $(TITLE)"$$VER".shar \
	-C $(JSRCS) -T $(ESRCS))

clean:
	-rm -f *.o funcno.h kanji.h
	-rm -f kanjicnv.exe mkfuncno.exe expfunc.exe
	-rm -f $(PROGRAM).exe $(PROGRAM).$(MANSEC) $(PROGRAM).$(MANSEC)c
	-rm -f $(PROGRAM).doc $(ARGS)
	-rm -f core
# DO NOT DELETE THIS LINE -- make depend depends on it.

main.o: fd.h machine.h config.h
main.o: types.h pathname.h term.h
main.o: func.h kctype.h
main.o: kanji.h funcno.h version.h
main.o: dosdisk.h
term.o: machine.h config.h
term.o: term.h
pathname.o: machine.h config.h
pathname.o: pathname.h
libc.o: fd.h machine.h config.h
libc.o: types.h pathname.h term.h
libc.o: func.h kctype.h
libc.o: kanji.h
input.o: fd.h machine.h config.h
input.o: types.h pathname.h
input.o: term.h func.h
input.o: kctype.h kanji.h
shell.o: fd.h machine.h config.h
shell.o: types.h pathname.h
shell.o: term.h func.h
shell.o: kctype.h kanji.h funcno.h
info.o: fd.h machine.h config.h
info.o: types.h pathname.h term.h
info.o: funcno.h kanji.h
dosdisk.o: machine.h config.h
dosdisk.o: dosdisk.h
dosemu.o: fd.h machine.h config.h
dosemu.o: types.h pathname.h
dosemu.o: func.h dosdisk.h
dosemu.o: kctype.h
unixdisk.o: unixdisk.h machine.h config.h
unixdisk.o: unixemu.h
unixemu.o: fd.h machine.h config.h
unixemu.o: types.h pathname.h
unixemu.o: func.h
unixemu.o: unixdisk.h
unixemu.o: unixemu.h
rockridg.o: fd.h machine.h config.h
rockridg.o: types.h pathname.h
rockridg.o: func.h
builtin.o: fd.h machine.h config.h
builtin.o: types.h pathname.h
builtin.o: term.h func.h
builtin.o: kanji.h kctype.h funcno.h dosdisk.h
parse.o: fd.h machine.h config.h
parse.o: types.h pathname.h
parse.o: func.h kctype.h
parse.o: dosdisk.h
kanji.o: fd.h machine.h config.h
kanji.o: types.h pathname.h
kanji.o: term.h func.h
kanji.o: kctype.h
file.o: fd.h machine.h config.h
file.o: types.h pathname.h term.h
file.o: func.h kanji.h
file.o: kctype.h
apply.o: fd.h machine.h config.h
apply.o: types.h pathname.h
apply.o: term.h func.h
apply.o: kanji.h
archive.o: fd.h machine.h config.h
archive.o: types.h pathname.h
archive.o: term.h func.h
archive.o: funcno.h kanji.h
tree.o: fd.h machine.h config.h
tree.o: types.h pathname.h term.h
tree.o: func.h kanji.h
command.o: fd.h machine.h config.h
command.o: types.h pathname.h
command.o: term.h func.h
command.o: kanji.h funcno.h
command.o: functabl.h
browse.o: fd.h machine.h config.h
browse.o: types.h pathname.h
browse.o: term.h func.h
browse.o: funcno.h kanji.h
