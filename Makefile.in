#
#	Makefile for fd
#

TITLE	= FD-
VERMAJ	= __VERMAJ__
VERSION	= __VERSION__
PREFIX	= __PREFIX__
CONFDIR	= __CONFDIR__
BUILD	=
MANSEC	= 1
TOPDIR	= $(BUILD)$(PREFIX)
BINDIR	= $(TOPDIR)/bin
DATADIR	= $(TOPDIR)/share/fd
MANDIR	= $(TOPDIR)/man/man$(MANSEC)
CATDIR	= $(TOPDIR)/man/cat$(MANSEC)
JMANDIR	= $(TOPDIR)/man__LANGDIR__/man$(MANSEC)
JCATDIR	= $(TOPDIR)/man__LANGDIR__/cat$(MANSEC)
IPKWDIR	= ./ipk.work
IPKTDIR	= ./ipk.tmp
DIST	= __DIST__
DEFRC	= $(CONFDIR)/fd__RCVERSION__rc
BLDRC	= $(BUILD)$(DEFRC)
DOSRC	= ~FD\\fd__RCVERSION__rc
UNITBL	= fd-unicd.tbl
DICTTBL	= fd-dict.tbl
DICTTXT	= fd-dict.txt
DICTSRC	= __DICTSRC__

SRC	= main.c printf.c termio.c term.c pathname.c \
	system.c posixsh.c doscom.c log.c \
	dosdisk.c dosemu.c mkunitbl.c \
	unixdisk.c unixemu.c \
	pty.c termemu.c frontend.c backend.c \
	libc.c file.c apply.c \
	parse.c builtin.c shell.c \
	kanji.c input.c \
	ime.c roman.c dict.c mkdict.c mktankan.c \
	info.c rockridg.c archive.c tree.c \
	custom.c command.c browse.c \
	kanjicnv.c mkfuncno.c expfunc.c mkmfsed.c
HEADER	= fd.h machine.h types.h kctype.h printf.h \
	termio.h term.h pathname.h \
	wait.h system.h \
	dosdisk.h \
	unixdisk.h unixemu.h \
	termemu.h roman.h hinsi.h \
	func.h functabl.h

DOC	= README.eng HISTORY.eng FAQ.eng TECHKNOW.eng \
	Install.eng ToAdmin.eng LICENSES.eng
JDOC	= README HISTORY FAQ TECHKNOW \
	Install ToAdmin LICENSES
MANSRC	= fd_e.man
MANCAT	= fd_e.cat
JMANSRC	= fd.man
JMANCAT	= fd.cat
RUNCOM	= fdrc
ARGS	= object.arg

SRCS	= $(DOC) $(MANSRC) $(MANCAT) \
	Configur Makefile Makefile.in $(SRC) $(HEADER) \
	makefile.gpc makefile.g98 \
	makefile.dpc makefile.d98 \
	makefile.lpc makefile.l98 \
	makefile.bpc makefile.b98 \
	config.hin mkmfdosg.sed mkmfdosd.sed mkmfdosl.sed mkmfdosb.sed \
	version.h _fdrc _fdrc.dif
JSRCS	= $(JDOC) $(JMANSRC) $(JMANCAT) \
	kanji.hin
SOURCES	= $(SRCS) $(JSRCS)
SHSOURCES = system.c posixsh.c doscom.c pathname.c \
	machine.h kctype.h system.h pathname.h unixemu.h \
	kanjicnv.c expfunc.c mkmfsed.c \
	TECHKNOW Configur Makefile Makefile.in \
	makefile.gpc makefile.g98 \
	makefile.dpc makefile.d98 \
	makefile.lpc makefile.l98 \
	makefile.bpc makefile.b98 \
	config.hin mkmfdosg.sed mkmfdosd.sed mkmfdosl.sed mkmfdosb.sed

CC	= __CC__
HOSTCC	= __HOSTCC__
INSTALL	= __INSTALL__
MAKE	= make
SHELL	= /bin/sh
SED	= sed
ECHO	= __ECHO__
CP	= __COPY__
RM	= __RM__
LN	= __LN__
CHMOD	= chmod
EXE	= __EXE__
PROGRAM	= fd
ALIAS	= fdsh
OBJ1	= main__OBJ__ printf__OBJ__ termio__OBJ__ term__OBJ__ \
	pathname__OBJ__ system__OBJ__ posixsh__OBJ__ doscom__OBJ__ log__OBJ__
OBJ2	= dosdisk__OBJ__ __EMUOBJS__ \
	pty__OBJ__ termemu__OBJ__ frontend__OBJ__ backend__OBJ__ \
	libc__OBJ__ file__OBJ__ apply__OBJ__ \
	parse__OBJ__ builtin__OBJ__ shell__OBJ__
OBJ3	= kanji__OBJ__ input__OBJ__ __IMEOBJS__ \
	info__OBJ__ rockridg__OBJ__ archive__OBJ__ tree__OBJ__ \
	custom__OBJ__ command__OBJ__ browse__OBJ__
SOBJ	= ssystem__OBJ__ sposixsh__OBJ__ sdoscom__OBJ__ \
	spathnam__OBJ__ sprintf__OBJ__ stermio__OBJ__
BOBJ	= bsystem__OBJ__ bdoscom__OBJ__ \
	bpathnam__OBJ__ bprintf__OBJ__ btermio__OBJ__
ALLOC	=
DEBUG	=

LDFLAGS	= __TERMLIBS__ __REGLIBS__ __OTHERLIBS__ $(ALLOC)
CFLAGS	= -D__OSTYPE__=1 __CCOPTIONS__ $(DEBUG)
HOSTCFLAGS = -D__OSTYPE__=1 __HOSTCCOPTIONS__
SLDFLAGS = __REGLIBS__ __OTHERLIBS__ $(ALLOC)
FDCFLAGS = $(CFLAGS) $(CPPFLAGS) __MEM__ -DFD=$(VERMAJ)
SHCFLAGS = $(CFLAGS) $(CPPFLAGS) __SHMEM__ -DFDSH=$(VERMAJ)
BSHCFLAGS = $(CFLAGS) $(CPPFLAGS) __BSHMEM__ -DFDSH=$(VERMAJ) -DMINIMUMSHELL
DEFCFLAGS = -DDEFRC=__DEFRC__

.SUFFIXES: .h .c __OBJ__ __EXE__

############################################################
#	Dependency Rules
############################################################

all: $(PROGRAM)__EXE__ $(PROGRAM).$(MANSEC) __UNITBL__ __DICTTBL__

$(PROGRAM)__EXE__: $(OBJ1) $(OBJ2) $(OBJ3) $(ARGS)
	$(CC) __MEM__ __LNK__ __OBJLIST__ $(LDFLAGS)
	__RENAME__ $@ $(PROGRAM)
	__AOUT2EXE__ $(PROGRAM)
	__REMOVE__ $(PROGRAM)

$(ARGS): $(OBJ1) $(OBJ2) $(OBJ3)
	@$(ECHO) $(OBJ1) > $(ARGS)
	@$(ECHO) $(OBJ2) >> $(ARGS)
	@$(ECHO) $(OBJ3) >> $(ARGS)

main__OBJ__: main.c
	$(CC) $(FDCFLAGS) $(DEFCFLAGS) __TBLPATH__ -c __OUT__ $*.c

termio__OBJ__: termio.c
	$(CC) $(FDCFLAGS) __FDSETSIZE__ -c __OUT__ $*.c

system__OBJ__: system.c
	$(CC) $(FDCFLAGS) $(DEFCFLAGS) -c __OUT__ $*.c

.c__OBJ__:
	$(CC) $(FDCFLAGS) -c __OUT__ $*.c


############################################################
# kanji using module

kanji.h: kanjicnv__EXE__ kanji.hin
	./kanjicnv$(EXE) __KCODEOPTION__ __PREFIXOPTION__ __MSBOPTION__ kanji.hin $@

$(PROGRAM).$(MANSEC): kanjicnv__EXE__ $(JMANSRC)
	./kanjicnv$(EXE) __KCODEOPTION__ __PREFIXOPTION__ $(JMANSRC) $@

$(PROGRAM).$(MANSEC)c: kanjicnv__EXE__ $(JMANCAT)
	./kanjicnv$(EXE) __KCODEOPTION__ $(JMANCAT) $@

$(PROGRAM).eng: kanjicnv__EXE__ $(MANCAT)
	./kanjicnv$(EXE) -b $(MANCAT) $@

$(PROGRAM).doc: kanjicnv__EXE__ $(JMANCAT)
	./kanjicnv$(EXE) __KCODEOPTION__ -b $(JMANCAT) $@

README.doc: kanjicnv__EXE__ README
	./kanjicnv$(EXE) __KCODEOPTION__ README $@

HISTORY.doc: kanjicnv__EXE__ HISTORY
	./kanjicnv$(EXE) __KCODEOPTION__ HISTORY $@

FAQ.doc: kanjicnv__EXE__ FAQ
	./kanjicnv$(EXE) __KCODEOPTION__ FAQ $@

LICENSES.doc: kanjicnv__EXE__ LICENSES
	./kanjicnv$(EXE) __KCODEOPTION__ LICENSES $@

kanjicnv__EXE__: kanjicnv.c machine.h config.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) __LNK__ kanjicnv.c
	__RENAME__ $@ kanjicnv
	__AOUT2EXE__ kanjicnv
	__REMOVE__ kanjicnv


############################################################
# function list using module

funcno.h: mkfuncno__EXE__
	./mkfuncno$(EXE) $@

mkfuncno__EXE__: mkfuncno.c functabl.h fd.h machine.h config.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) -DFD=$(VERMAJ) __LNK__ mkfuncno.c
	__RENAME__ $@ mkfuncno
	__AOUT2EXE__ mkfuncno
	__REMOVE__ mkfuncno


############################################################
# UNICODE table generating module

$(UNITBL): mkunitbl__EXE__
	./mkunitbl$(EXE) $@

mkunitbl__EXE__: mkunitbl.c machine.h config.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) __LNK__ mkunitbl.c
	__RENAME__ $@ mkunitbl
	__AOUT2EXE__ mkunitbl
	__REMOVE__ mkunitbl


############################################################
# Kanji transfer table generating module

$(DICTTBL): mkdict__EXE__ $(DICTSRC)
	./mkdict$(EXE) __MKDICTOPTION__ $@ $(DICTSRC)

mkdict__EXE__: mkdict__OBJ__ troman__OBJ__ tkanji__OBJ__
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) __LNK__ mkdict__OBJ__ troman__OBJ__ tkanji__OBJ__
	__RENAME__ $@ mkdict
	__AOUT2EXE__ mkdict
	__REMOVE__ mkdict

mktankan__EXE__: mktankan__OBJ__ troman__OBJ__ tkanji__OBJ__
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) __LNK__ mktankan__OBJ__ troman__OBJ__ tkanji__OBJ__
	__RENAME__ $@ mktankan
	__AOUT2EXE__ mktankan
	__REMOVE__ mktankan

mkdict__OBJ__: mkdict.c machine.h config.h printf.h kctype.h roman.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) -c __OUT__ mkdict.c

mktankan__OBJ__: mktankan.c machine.h config.h printf.h kctype.h roman.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) -c __OUT__ mktankan.c

troman__OBJ__: roman.c machine.h config.h printf.h kctype.h roman.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) -c __OUT__ roman.c

tkanji__OBJ__: kanji.c machine.h config.h printf.h kctype.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) -c __OUT__ kanji.c

rmdict:
	-$(RM) $(DICTTBL)

$(DICTTXT): mktankan__EXE__
	./mktankan$(EXE) $@


############################################################
# to install all

install: $(PROGRAM)__EXE__ $(PROGRAM).$(MANSEC) __UNITBL__ __DICTTBL__
	$(INSTALL) __INSTSTRIP__ $(PROGRAM)$(EXE) $(BINDIR)
	$(CHMOD) a+rx $(BINDIR)/$(PROGRAM)$(EXE)
	-$(RM) $(BINDIR)/$(ALIAS)$(EXE)
	$(LN) $(BINDIR)/$(PROGRAM)$(EXE) $(BINDIR)/$(ALIAS)$(EXE)
	$(CHMOD) a+rx $(BINDIR)/$(ALIAS)$(EXE)
	[ -d $(JMANDIR) ] || mkdir $(JMANDIR)
	$(INSTALL) $(PROGRAM).$(MANSEC) $(JMANDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(JMANDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(JMANDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(JMANDIR)/$(PROGRAM).$(MANSEC) $(JMANDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(JMANDIR)/$(ALIAS).$(MANSEC)
	[ -d $(MANDIR) ] || mkdir $(MANDIR)
	$(INSTALL) $(MANSRC) $(MANDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(MANDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(MANDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(MANDIR)/$(PROGRAM).$(MANSEC) $(MANDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(MANDIR)/$(ALIAS).$(MANSEC)
	-if [ -f $(RUNCOM) ]; then \
		$(INSTALL) $(RUNCOM) $(BLDRC); \
		$(CHMOD) a+r-x $(BLDRC); \
	fi
	-if [ -f $(UNITBL) ]; then \
		[ -d __DATADIR__ ] || mkdir __DATADIR__; \
		$(INSTALL) $(UNITBL) __DATADIR__; \
		$(CHMOD) a+r-x __DATADIR__/$(UNITBL); \
	fi
	-if [ -f $(DICTTBL) ]; then \
		[ -d __DATADIR__ ] || mkdir __DATADIR__; \
		$(INSTALL) $(DICTTBL) __DATADIR__; \
		$(CHMOD) a+r-x __DATADIR__/$(DICTTBL); \
	fi

catman: $(MANCAT)
	$(INSTALL) $(MANCAT) $(CATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(CATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(CATDIR)/$(PROGRAM).$(MANSEC) $(CATDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(CATDIR)/$(ALIAS).$(MANSEC)

catman-b: $(PROGRAM).eng
	$(INSTALL) $(PROGRAM).eng $(CATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(CATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(CATDIR)/$(PROGRAM).$(MANSEC) $(CATDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(CATDIR)/$(ALIAS).$(MANSEC)

compman: catman
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC)
	compress -f $(CATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC).Z
	$(LN) $(CATDIR)/$(PROGRAM).$(MANSEC).Z $(CATDIR)/$(ALIAS).$(MANSEC).Z

compman-b: catman-b
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC)
	compress -f $(CATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(CATDIR)/$(ALIAS).$(MANSEC).Z
	$(LN) $(CATDIR)/$(PROGRAM).$(MANSEC).Z $(CATDIR)/$(ALIAS).$(MANSEC).Z

jcatman: catman $(PROGRAM).$(MANSEC)c
	$(INSTALL) $(PROGRAM).$(MANSEC)c $(JCATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(JCATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(JCATDIR)/$(PROGRAM).$(MANSEC) $(JCATDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(JCATDIR)/$(ALIAS).$(MANSEC)

jcatman-b: catman-b $(PROGRAM).doc
	$(INSTALL) $(PROGRAM).doc $(JCATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r-x $(JCATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC)
	$(LN) $(JCATDIR)/$(PROGRAM).$(MANSEC) $(JCATDIR)/$(ALIAS).$(MANSEC)
	$(CHMOD) a+r-x $(JCATDIR)/$(ALIAS).$(MANSEC)

jcompman: compman jcatman
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC)
	compress -f $(JCATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC).Z
	$(LN) $(JCATDIR)/$(PROGRAM).$(MANSEC).Z $(JCATDIR)/$(ALIAS).$(MANSEC).Z

jcompman-b: compman-b jcatman-b
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC)
	compress -f $(JCATDIR)/$(PROGRAM).$(MANSEC)
	-$(RM) $(JCATDIR)/$(ALIAS).$(MANSEC).Z
	$(LN) $(JCATDIR)/$(PROGRAM).$(MANSEC).Z $(JCATDIR)/$(ALIAS).$(MANSEC).Z


############################################################
# to make dependency

depend: $(SRC) kanji.h funcno.h
	mv Makefile.in Makefile.in.bak
	makedepend \
		-s "# DO NOT DELETE THIS LINE -- make depend depends on it." \
		-f Makefile.tmp -- $(CFLAGS) -- $(SRC)
	-$(RM) Makefile.tmp.bak
	$(SED) -e '/^# DO NOT DELETE THIS LINE/,$$d' Makefile.in.bak \
		> Makefile.in
	$(ECHO) "# DO NOT DELETE THIS LINE -- make depend depends on it." \
		>> Makefile.in
	$(SED) -e '1,/^# DO NOT DELETE THIS LINE/d' \
		-e 's/\/[^ ]* *//g' \
		-e 's/\.o/\_\_OBJ\_\_/g' \
		-e 's/ *$$//' \
		-e '/: *$$/d' Makefile.tmp >> Makefile.in
	-$(RM) Makefile.in.bak
	-$(RM) Makefile.tmp


############################################################
# to make configuration file manually

config: Configur expfunc.c
	-if ($(ECHO) 't() { echo $1; }; t test' | $(SHELL) >/dev/null 2>&1); then \
		$(SED) -e "2,3d" -e "s:__cc__:__CC__:" Configur \
		| $(SHELL) > config.h; \
	else \
		$(MAKE) -f Makefile.tmp expfunc__EXE__ && \
		$(SED) -e "2,3d" -e "s:__cc__:__CC__:" Configur \
		| ./expfunc$(EXE) | $(SHELL) > config.h; \
	fi

config.h: config.hin
	$(CP) config.hin config.h

expfunc__EXE__: expfunc.c machine.h config.h
	$(HOSTCC) $(HOSTCFLAGS) $(CPPFLAGS) __LNK__ expfunc.c
	__RENAME__ $@ expfunc
	__AOUT2EXE__ expfunc
	__REMOVE__ expfunc


############################################################
# sample program for pseudo system(3)

sh: fdsh__EXE__

fdsh__EXE__: $(SOBJ)
	$(CC) __SHMEM__ __LNK__ $(SOBJ) $(SLDFLAGS)
	__RENAME__ $@ fdsh
	__AOUT2EXE__ fdsh
	__REMOVE__ fdsh

ssystem__OBJ__: system.c machine.h config.h printf.h kctype.h pathname.h system.h
	$(CC) $(SHCFLAGS) -c __OUT__ system.c

sposixsh__OBJ__: posixsh.c machine.h config.h printf.h kctype.h pathname.h system.h
	$(CC) $(SHCFLAGS) -c __OUT__ posixsh.c

sdoscom__OBJ__: doscom.c machine.h config.h printf.h kctype.h pathname.h system.h
	$(CC) $(SHCFLAGS) -c __OUT__ doscom.c

spathnam__OBJ__: pathname.c machine.h config.h printf.h pathname.h
	$(CC) $(SHCFLAGS) -c __OUT__ pathname.c

sprintf__OBJ__: printf.c machine.h config.h printf.h kctype.h
	$(CC) $(SHCFLAGS) -c __OUT__ printf.c

stermio__OBJ__: termio.c machine.h config.h termio.h
	$(CC) $(SHCFLAGS) -c __OUT__ termio.c


############################################################
# Bourne shell

bsh: fdbsh__EXE__

fdbsh__EXE__: $(BOBJ)
	$(CC) __BSHMEM__ __LNK__ $(BOBJ) $(SLDFLAGS)
	__RENAME__ $@ fdbsh
	__AOUT2EXE__ fdbsh
	__REMOVE__ fdbsh

bsystem__OBJ__: system.c machine.h config.h printf.h kctype.h pathname.h system.h
	$(CC) $(BSHCFLAGS) -c __OUT__ system.c

bdoscom__OBJ__: doscom.c machine.h config.h printf.h kctype.h pathname.h system.h
	$(CC) $(BSHCFLAGS) -c __OUT__ doscom.c

bpathnam__OBJ__: pathname.c machine.h config.h printf.h pathname.h
	$(CC) $(BSHCFLAGS) -c __OUT__ pathname.c

bprintf__OBJ__: printf.c machine.h config.h printf.h kctype.h
	$(CC) $(BSHCFLAGS) -c __OUT__ printf.c

btermio__OBJ__: termio.c machine.h config.h termio.h
	$(CC) $(BSHCFLAGS) -c __OUT__ termio.c


############################################################
# for programer's maintenance

tar: $(SOURCES)
	tar cvf $(TITLE)$(VERSION).tar $(SOURCES)
	compress -f $(TITLE)$(VERSION).tar

gtar: $(SOURCES)
	tar cvf $(TITLE)$(VERSION).tar $(SOURCES)
	gzip -f $(TITLE)$(VERSION).tar

shtar: $(SHSOURCES)
	(VER=`date '+%y%m%d'`; \
	tar cvf $(TITLE)sh-$$VER.tar $(SHSOURCES); \
	gzip -f $(TITLE)sh-$$VER.tar)

lzh: $(SOURCES)
	-$(RM) $(TITLE)$(VERSION).lzh
	lha a $(TITLE)$(VERSION).lzh $(SOURCES)

shar: $(SOURCES)
	-$(RM) $(TITLE)$(VERSION).shar.[0-9][0-9]
	shar -L50 -apc -n $(TITLE)$(VERSION) -o $(TITLE)$(VERSION).shar \
	-T $(SRCS) -C $(JSRCS)

ipk: $(PROGRAM)__EXE__ __UNITBL__ __DICTTBL__
	-[ -d $(IPKWDIR)/$(BINDIR) ] || mkdir -p $(IPKWDIR)/$(BINDIR)
	-[ -d $(IPKWDIR)/__DATADIR__ ] || mkdir -p $(IPKWDIR)/__DATADIR__
	-[ -d $(IPKWDIR)/$(CONFDIR) ] || mkdir -p $(IPKWDIR)/$(CONFDIR)
	-[ -d $(IPKWDIR)/CONTROL ] || mkdir -p $(IPKWDIR)/CONTROL
	-[ -d $(IPKTDIR) ] || mkdir -p $(IPKTDIR)
	$(CP) -p $(PROGRAM)$(EXE) $(IPKWDIR)/$(BINDIR)
	-[ -z "$(STRIP)" ] || $(STRIP) $(IPKWDIR)/$(BINDIR)/$(PROGRAM)$(EXE)
	$(CHMOD) a+rx $(IPKWDIR)/$(BINDIR)/$(PROGRAM)$(EXE)
	-$(RM) $(IPKWDIR)/$(BINDIR)/$(ALIAS)$(EXE)
	$(LN) $(IPKWDIR)/$(BINDIR)/$(PROGRAM)$(EXE) \
		$(IPKWDIR)/$(BINDIR)/$(ALIAS)$(EXE)
	$(CHMOD) a+rx $(IPKWDIR)/$(BINDIR)/$(ALIAS)$(EXE)
	$(SED) -e 's:#TMPDIR=.*:TMPDIR=/home/tmp:' \
		-e 's:#LANGUAGE=.*:LANGUAGE=euc:' \
		-e 's:#INPUTKCODE=.*:INPUTKCODE=euc:' \
		-e 's:#FNAMEKCODE=.*:FNAMEKCODE=utf8:' \
		-e '/# launcher definition/,/^$$/ {' \
		-e  '/^$$/ {' \
		-e   'i \' \
		-e   'launch ".tar.Z"	"gzip -cd %C|tar tvf -"	"%a %u/%g %s %y-%m-%d %t %*f"' \
		-e   'i \' \
		-e   'launch ".taZ"	"gzip -cd %C|tar tvf -"	"%a %u/%g %s %y-%m-%d %t %*f"' \
		-e   'i \' \
		-e   'launch ".ipk"	"gzip -cd %C|tar xOf - ./data.tar.gz|gzip -cd|tar tvf -" \\' \
		-e   'i \' \
		-e   '				"%a %u/%g %s %y-%m-%d %t %*f"' \
		-e   'i \' \
		-e   'launch ".deb"	"ar -p %C data.tar.gz|gzip -cd|tar tvf -" \\' \
		-e   'i \' \
		-e   '				"%a %u/%g %s %y-%m-%d %t %*f"' \
		-e  '}' \
		-e '}' \
		-e '/# archiver definition/,/^$$/ {' \
		-e  '/^$$/ {' \
		-e   'i \' \
		-e   'arch ".tar.Z"	"echo ERROR; false" 		"gzip -cd %C|tar xf - %TA"' \
		-e   'i \' \
		-e   'arch ".taZ"	"echo ERROR; false"		"gzip -cd %C|tar xf - %TA"' \
		-e   'i \' \
		-e   'arch ".ipk"	"echo ERROR; false" \\' \
		-e   'i \' \
		-e   '		"gzip -cd %C|tar xOf - ./data.tar.gz|gzip -cd|tar xf - %TA"' \
		-e   'i \' \
		-e   'arch ".deb"	"echo ERROR; false" \\' \
		-e   'i \' \
		-e   '		"ar -p %C data.tar.gz|gzip -cd|tar xf - %TA"' \
		-e  '}' \
		-e '}' \
		-e '$$ {' \
		-e  'a \' \
		-e  'if [ " $$TERM" = " vt100" -a " $$CONSOLE" = " /dev/console" ]; then' \
		-e  'a \' \
		-e  '	keymap BS	"^?"' \
		-e  'a \' \
		-e  '	keymap DEL	"\\033[3~"' \
		-e  'a \' \
		-e  '	keymap HOME	"\\033[H"' \
		-e  'a \' \
		-e  '	keymap END	"\\033[F"' \
		-e  'a \' \
		-e  'fi' \
		-e '}' \
	_fdrc > $(IPKWDIR)/$(BLDRC)
	$(CHMOD) a+r-x $(IPKWDIR)/$(BLDRC)
	-if [ -f $(UNITBL) ]; then \
		cp -p $(UNITBL) $(IPKWDIR)/__DATADIR__; \
		$(CHMOD) a+r-x $(IPKWDIR)/__DATADIR__/$(UNITBL); \
	fi
	-if [ -f $(DICTTBL) ]; then \
		cp -p $(DICTTBL) $(IPKWDIR)/__DATADIR__; \
		$(CHMOD) a+r-x $(IPKWDIR)/__DATADIR__/$(DICTTBL); \
	fi
	$(ECHO) "Package: fd" > $(IPKWDIR)/CONTROL/control
	$(ECHO) "Priority: optional" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Section: extras" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Maintainer: $(DIST)" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Architecture: arm" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Version: $(VERSION)-1" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Depends: ncurses" >> $(IPKWDIR)/CONTROL/control
	$(ECHO) "Description: a file & directory maintenance tool." \
		>> $(IPKWDIR)/CONTROL/control
	(cd $(IPKWDIR); tar cf ../data.tar --exclude=CONTROL .)
	(cd $(IPKWDIR)/CONTROL; tar cf ../../control.tar .)
	gzip ./data.tar
	mv ./data.tar.gz $(IPKTDIR)
	gzip ./control.tar
	mv ./control.tar.gz $(IPKTDIR)
	$(ECHO) "2.0" > $(IPKTDIR)/debian-binary
	(cd $(IPKTDIR); \
	tar cf ../ipk.tar ./debian-binary ./data.tar.gz ./control.tar.gz)
	gzip ./ipk.tar
	mv ./ipk.tar.gz ./fd_$(VERSION)-1_arm.ipk
	-$(RM) -r $(IPKWDIR) $(IPKTDIR)

clean:
	-$(RM) core
	-$(RM) *__OBJ__
	-$(RM) funcno.h
	-$(RM) kanji.h
	-$(RM) kanjicnv$(EXE)
	-$(RM) expfunc$(EXE)
	-$(RM) mkfuncno$(EXE)
	-$(RM) mkunitbl$(EXE)
	-$(RM) mkdict$(EXE)
	-$(RM) mktankan$(EXE)
	-$(RM) fdsh$(EXE)
	-$(RM) fdbsh$(EXE)
	-$(RM) $(PROGRAM)$(EXE)
	-$(RM) $(PROGRAM).$(MANSEC)
	-$(RM) $(PROGRAM).$(MANSEC)c
	-$(RM) $(PROGRAM).eng
	-$(RM) $(PROGRAM).doc
	-$(RM) $(ARGS)
	-$(RM) __UNITBL__
	-$(RM) $(DICTTXT)
	-$(RM) __DICTTBL__
# DO NOT DELETE THIS LINE -- make depend depends on it.

main__OBJ__: fd.h
main__OBJ__: machine.h config.h types.h
main__OBJ__: printf.h kctype.h
main__OBJ__: pathname.h term.h func.h
main__OBJ__: dosdisk.h kanji.h version.h system.h
main__OBJ__: termio.h
main__OBJ__: wait.h
printf__OBJ__: machine.h config.h
printf__OBJ__: printf.h
printf__OBJ__: kctype.h
termio__OBJ__: machine.h config.h
termio__OBJ__: printf.h
termio__OBJ__: termio.h
term__OBJ__: machine.h config.h
term__OBJ__: printf.h kctype.h
term__OBJ__: termio.h
term__OBJ__: term.h
pathname__OBJ__: machine.h config.h
pathname__OBJ__: printf.h
pathname__OBJ__: kctype.h
pathname__OBJ__: pathname.h
system__OBJ__: machine.h config.h
system__OBJ__: printf.h
system__OBJ__: kctype.h
system__OBJ__: pathname.h
system__OBJ__: system.h termio.h
system__OBJ__: wait.h
posixsh__OBJ__: machine.h config.h
posixsh__OBJ__: printf.h
posixsh__OBJ__: kctype.h
posixsh__OBJ__: pathname.h
posixsh__OBJ__: system.h termio.h
posixsh__OBJ__: wait.h
doscom__OBJ__: machine.h config.h
doscom__OBJ__: printf.h
doscom__OBJ__: kctype.h
doscom__OBJ__: pathname.h
doscom__OBJ__: system.h termio.h
doscom__OBJ__: wait.h
log__OBJ__: fd.h
log__OBJ__: machine.h config.h types.h
log__OBJ__: printf.h kctype.h
log__OBJ__: pathname.h term.h func.h
log__OBJ__: dosdisk.h
dosdisk__OBJ__: machine.h config.h
dosdisk__OBJ__: dosdisk.h
dosdisk__OBJ__: kctype.h
dosemu__OBJ__: fd.h
dosemu__OBJ__: machine.h config.h types.h
dosemu__OBJ__: printf.h
dosemu__OBJ__: kctype.h
dosemu__OBJ__: pathname.h term.h termio.h
dosemu__OBJ__: func.h
dosemu__OBJ__: dosdisk.h
mkunitbl__OBJ__: machine.h config.h
unixdisk__OBJ__: machine.h config.h
unixdisk__OBJ__: unixdisk.h
unixdisk__OBJ__: termio.h
unixdisk__OBJ__: unixemu.h dosdisk.h
unixdisk__OBJ__: kctype.h
unixemu__OBJ__: fd.h
unixemu__OBJ__: machine.h config.h types.h
unixemu__OBJ__: printf.h
unixemu__OBJ__: kctype.h
unixemu__OBJ__: pathname.h term.h termio.h
unixemu__OBJ__: func.h
unixemu__OBJ__: dosdisk.h
unixemu__OBJ__: unixdisk.h unixemu.h
pty__OBJ__: fd.h
pty__OBJ__: machine.h config.h types.h
pty__OBJ__: printf.h kctype.h
pty__OBJ__: pathname.h term.h
pty__OBJ__: termio.h
termemu__OBJ__: fd.h
termemu__OBJ__: machine.h config.h
termemu__OBJ__: types.h
termemu__OBJ__: printf.h
termemu__OBJ__: kctype.h
termemu__OBJ__: pathname.h term.h
termemu__OBJ__: func.h
termemu__OBJ__: dosdisk.h kanji.h termemu.h system.h
termemu__OBJ__: termio.h
termemu__OBJ__: wait.h
frontend__OBJ__: fd.h
frontend__OBJ__: machine.h config.h
frontend__OBJ__: types.h
frontend__OBJ__: printf.h
frontend__OBJ__: kctype.h
frontend__OBJ__: pathname.h term.h funcno.h func.h
frontend__OBJ__: dosdisk.h kanji.h termemu.h roman.h
frontend__OBJ__: system.h termio.h
frontend__OBJ__: wait.h
backend__OBJ__: fd.h
backend__OBJ__: machine.h config.h
backend__OBJ__: types.h
backend__OBJ__: printf.h
backend__OBJ__: kctype.h
backend__OBJ__: pathname.h term.h
backend__OBJ__: termio.h
backend__OBJ__: func.h
backend__OBJ__: dosdisk.h
backend__OBJ__: termemu.h system.h wait.h
libc__OBJ__: fd.h
libc__OBJ__: machine.h config.h types.h
libc__OBJ__: printf.h
libc__OBJ__: kctype.h
libc__OBJ__: pathname.h term.h func.h
libc__OBJ__: dosdisk.h kanji.h system.h termio.h
libc__OBJ__: wait.h
libc__OBJ__: termemu.h
file__OBJ__: fd.h
file__OBJ__: machine.h config.h types.h
file__OBJ__: printf.h
file__OBJ__: kctype.h
file__OBJ__: pathname.h term.h termio.h
file__OBJ__: func.h
file__OBJ__: dosdisk.h kanji.h
apply__OBJ__: fd.h
apply__OBJ__: machine.h config.h types.h
apply__OBJ__: printf.h
apply__OBJ__: kctype.h
apply__OBJ__: pathname.h term.h func.h
apply__OBJ__: dosdisk.h kanji.h
parse__OBJ__: fd.h
parse__OBJ__: machine.h config.h
parse__OBJ__: types.h
parse__OBJ__: printf.h kctype.h
parse__OBJ__: pathname.h term.h
parse__OBJ__: func.h
parse__OBJ__: dosdisk.h system.h termio.h
parse__OBJ__: wait.h
builtin__OBJ__: fd.h
builtin__OBJ__: machine.h config.h
builtin__OBJ__: types.h
builtin__OBJ__: printf.h
builtin__OBJ__: kctype.h
builtin__OBJ__: pathname.h term.h func.h
builtin__OBJ__: dosdisk.h funcno.h kanji.h system.h
builtin__OBJ__: termio.h
builtin__OBJ__: wait.h
builtin__OBJ__: termemu.h roman.h
shell__OBJ__: fd.h
shell__OBJ__: machine.h config.h types.h
shell__OBJ__: printf.h
shell__OBJ__: kctype.h
shell__OBJ__: pathname.h term.h func.h
shell__OBJ__: dosdisk.h kanji.h system.h termio.h
shell__OBJ__: wait.h
shell__OBJ__: termemu.h
kanji__OBJ__: machine.h
kanji__OBJ__: config.h
kanji__OBJ__: printf.h kctype.h
input__OBJ__: fd.h
input__OBJ__: machine.h config.h
input__OBJ__: types.h
input__OBJ__: printf.h kctype.h
input__OBJ__: pathname.h term.h
input__OBJ__: func.h
input__OBJ__: dosdisk.h kanji.h system.h termio.h
input__OBJ__: wait.h
ime__OBJ__: fd.h
ime__OBJ__: machine.h config.h types.h
ime__OBJ__: printf.h kctype.h
ime__OBJ__: pathname.h term.h func.h
ime__OBJ__: dosdisk.h kanji.h wait.h
ime__OBJ__: roman.h termemu.h
roman__OBJ__: machine.h config.h
roman__OBJ__: printf.h
roman__OBJ__: kctype.h
roman__OBJ__: roman.h
dict__OBJ__: fd.h
dict__OBJ__: machine.h config.h types.h
dict__OBJ__: printf.h
dict__OBJ__: kctype.h
dict__OBJ__: pathname.h term.h termio.h
dict__OBJ__: func.h
dict__OBJ__: dosdisk.h roman.h
dict__OBJ__: hinsi.h
mkdict__OBJ__: machine.h config.h
mkdict__OBJ__: printf.h
mkdict__OBJ__: kctype.h
mkdict__OBJ__: roman.h hinsi.h
mktankan__OBJ__: machine.h config.h
mktankan__OBJ__: printf.h kctype.h
mktankan__OBJ__: roman.h
info__OBJ__: fd.h
info__OBJ__: machine.h
info__OBJ__: config.h types.h
info__OBJ__: printf.h kctype.h
info__OBJ__: pathname.h term.h
info__OBJ__: funcno.h kanji.h
rockridg__OBJ__: fd.h
rockridg__OBJ__: machine.h config.h
rockridg__OBJ__: types.h
rockridg__OBJ__: printf.h
rockridg__OBJ__: kctype.h
rockridg__OBJ__: pathname.h term.h func.h
rockridg__OBJ__: dosdisk.h
archive__OBJ__: fd.h
archive__OBJ__: machine.h config.h
archive__OBJ__: types.h
archive__OBJ__: printf.h
archive__OBJ__: kctype.h
archive__OBJ__: pathname.h term.h func.h
archive__OBJ__: dosdisk.h kanji.h system.h termio.h
archive__OBJ__: wait.h
tree__OBJ__: fd.h
tree__OBJ__: machine.h config.h types.h
tree__OBJ__: printf.h kctype.h
tree__OBJ__: pathname.h term.h func.h
tree__OBJ__: dosdisk.h kanji.h
custom__OBJ__: fd.h
custom__OBJ__: machine.h config.h types.h
custom__OBJ__: printf.h
custom__OBJ__: kctype.h
custom__OBJ__: pathname.h term.h func.h
custom__OBJ__: dosdisk.h funcno.h kanji.h system.h
custom__OBJ__: termio.h
custom__OBJ__: wait.h
command__OBJ__: fd.h
command__OBJ__: machine.h config.h
command__OBJ__: types.h
command__OBJ__: printf.h
command__OBJ__: kctype.h
command__OBJ__: pathname.h term.h func.h
command__OBJ__: dosdisk.h funcno.h kanji.h system.h
command__OBJ__: termio.h
command__OBJ__: wait.h
command__OBJ__: termemu.h functabl.h
browse__OBJ__: fd.h
browse__OBJ__: machine.h config.h
browse__OBJ__: types.h
browse__OBJ__: printf.h kctype.h
browse__OBJ__: pathname.h term.h
browse__OBJ__: func.h
browse__OBJ__: dosdisk.h funcno.h kanji.h termemu.h
kanjicnv__OBJ__: machine.h config.h
mkfuncno__OBJ__: fd.h
mkfuncno__OBJ__: machine.h config.h
mkfuncno__OBJ__: types.h
mkfuncno__OBJ__: printf.h
mkfuncno__OBJ__: kctype.h
mkfuncno__OBJ__: pathname.h term.h functabl.h
expfunc__OBJ__: machine.h config.h
mkmfsed__OBJ__: fd.h
mkmfsed__OBJ__: machine.h config.h
mkmfsed__OBJ__: types.h
mkmfsed__OBJ__: printf.h
mkmfsed__OBJ__: kctype.h
mkmfsed__OBJ__: pathname.h term.h
mkmfsed__OBJ__: version.h
