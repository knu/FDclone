#
#	Makefile for fd
#

TITLE	= FD-
TOPDIR	= /usr/local
BINDIR	= $(TOPDIR)/bin
MANDIR	= $(TOPDIR)/man/man$(MANSEC)
CATDIR	= $(TOPDIR)/man/cat$(MANSEC)
DEFRC	= /etc/fdrc
DOSRC	= ~FD/fdrc
SHELL	= /bin/sh
INSTALL	= cp -p
CHMOD	= chmod
MANSEC	= 1

SRC	= main.c term.c pathname.c libc.c input.c shell.c info.c \
	dosdisk.c dosemu.c \
	unixdisk.c unixemu.c \
	rockridg.c builtin.c parse.c \
	kanji.c file.c apply.c archive.c tree.c command.c browse.c \
	kanjicnv.c mkfuncno.c expfunc.c
HEADER	= fd.h machine.h types.h kctype.h term.h pathname.h \
	dosdisk.h \
	unixdisk.h unixemu.h \
	func.h functabl.h

DOC	= README HISTORY FAQ TECHKNOW Install ToAdmin
MANSRC	= fd.man
MANCAT	= fd.cat
MANSEC	= 1
RUNCOM	= fdrc
ARGS	= object.arg

JSRCS	= $(DOC) kanji.hin $(MANSRC) $(MANCAT)
ESRCS	= Configur Makefile Makefile.in $(SRC) $(HEADER) \
	makefile.gpc makefile.lpc \
	makefile.g98 makefile.l98 \
	config.hin mkmfsed.c mkmfdosg.sed mkmfdosl.sed \
	version.h _fdrc _fdrc.dif
SOURCES	= $(JSRCS) $(ESRCS)

CC	= __CC__
CPP	= __CPP__
SED	= sed
PROGRAM	= fd
OBJ1	= main__OBJ__ term__OBJ__ pathname__OBJ__ libc__OBJ__ input__OBJ__ \
	shell__OBJ__ info__OBJ__ __OBJS__
OBJ2	= rockridg__OBJ__ builtin__OBJ__ parse__OBJ__ \
	kanji__OBJ__ file__OBJ__ apply__OBJ__ archive__OBJ__ tree__OBJ__ \
	command__OBJ__ browse__OBJ__

LDFLAGS	= __TERMLIBS__ __REGLIBS__ __OTHERLIBS__
CFLAGS	= -DFD -D__OSTYPE__ -DDEFRUNCOM=__DEFRC__ __CCOPTIONS__

.SUFFIXES: .h .c __OBJ__ __EXE__

############################################################
#	Dependency Rules
############################################################

goal:	$(PROGRAM)__EXE__ $(PROGRAM).$(MANSEC)

$(PROGRAM)__EXE__: $(OBJ1) $(OBJ2) $(ARGS)
	$(CC) $(CFLAGS) -o $@ __OBJLIST__ $(LDFLAGS)
	__RENAME__ $@ $(PROGRAM)
	__AOUT2EXE__ $(PROGRAM)
	__REMOVE__ $(PROGRAM)

$(ARGS): $(OBJ1) $(OBJ2)
	@echo $(OBJ1) > $(ARGS)
	@echo $(OBJ2) >> $(ARGS)

.c__OBJ__:
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $*.c -o $@

############################################################
# kanji using module

kanji.h: kanjicnv__EXE__ kanji.hin
	./kanjicnv__EXE__ __KCODEOPTION__ __PREFIXOPTION__ __MSBOPTION__ kanji.hin $@

$(PROGRAM).$(MANSEC): kanjicnv__EXE__ $(MANSRC)
	./kanjicnv__EXE__ __KCODEOPTION__ __PREFIXOPTION__ $(MANSRC) $@

$(PROGRAM).$(MANSEC)c: kanjicnv__EXE__ $(MANCAT)
	./kanjicnv__EXE__ __KCODEOPTION__ $(MANCAT) $@

$(PROGRAM).doc: kanjicnv__EXE__ $(MANCAT)
	./kanjicnv__EXE__ __KCODEOPTION__ -b $(MANCAT) $@

history.doc: kanjicnv__EXE__ HISTORY
	./kanjicnv__EXE__ __KCODEOPTION__ HISTORY $@

kanjicnv__EXE__: kanjicnv.c
	$(CC) $(CFLAGS) -o $@ kanjicnv.c
	__RENAME__ $@ kanjicnv
	__AOUT2EXE__ kanjicnv
	__REMOVE__ kanjicnv


############################################################
# function list using module

funcno.h: mkfuncno__EXE__ functabl.h fd.h config.h
	-$(CPP) -DCPP command.c | ./mkfuncno__EXE__ - $@

mkfuncno__EXE__: mkfuncno.c
	$(CC) $(CFLAGS) -o $@ mkfuncno.c
	__RENAME__ $@ mkfuncno
	__AOUT2EXE__ mkfuncno
	__REMOVE__ mkfuncno

config.h: config.hin
	__COPY__ config.hin config.h


############################################################
# to install all

install: $(PROGRAM)__EXE__ $(PROGRAM).$(MANSEC)
	$(INSTALL) $(PROGRAM)__EXE__ $(BINDIR)
	$(CHMOD) a+rx $(BINDIR)/$(PROGRAM)__EXE__
	$(INSTALL) $(PROGRAM).$(MANSEC) $(MANDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(MANDIR)/$(PROGRAM).$(MANSEC)
	-if [ -f $(RUNCOM) ]; then \
		$(INSTALL) $(RUNCOM) $(DEFRC); \
		$(CHMOD) a+r $(DEFRC); \
	fi

catman: $(PROGRAM).$(MANSEC)c
	$(INSTALL) $(PROGRAM).$(MANSEC)c $(CATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(CATDIR)/$(PROGRAM).$(MANSEC)

catman-b: $(PROGRAM).doc
	$(INSTALL) $(PROGRAM).doc $(CATDIR)/$(PROGRAM).$(MANSEC)
	$(CHMOD) a+r $(CATDIR)/$(PROGRAM).$(MANSEC)

compman: catman
	compress -f $(CATDIR)/$(PROGRAM).$(MANSEC)

compman-b: catman-b
	compress -f $(CATDIR)/$(PROGRAM).$(MANSEC)


############################################################
# to make dependency

depend: $(SRC) kanji.h funcno.h
	mv Makefile.in Makefile.in.bak
	makedepend -s "# DO NOT DELETE THIS LINE -- make depend depends on it."\
		-f Makefile.tmp -- $(CFLAGS) -- $(SRC)
	rm -f Makefile.tmp.bak
	$(SED) -e '/^# DO NOT DELETE THIS LINE/,$$d' Makefile.in.bak\
		> Makefile.in
	echo "# DO NOT DELETE THIS LINE -- make depend depends on it."\
		>> Makefile.in
	$(SED) -e '1,/^# DO NOT DELETE THIS LINE/d'\
		-e 's/\/[^ ]* *//g'\
		-e 's/\.o/\_\_OBJ\_\_/g'\
		-e 's/ *$$//'\
		-e '/: *$$/d' Makefile.tmp >> Makefile.in
	rm -f Makefile.in.bak Makefile.tmp


############################################################
# to make configuration file manually

config: Configur expfunc.c
	-if (echo 't() { echo $1; }; t test' | $(SHELL) >/dev/null 2>&1); then \
		$(SED) "2,3d" Configur | $(SHELL) > config.h; \
	else \
		if [ ! -f expfunc ]; then \
			$(CC) $(CFLAGS) -o expfunc expfunc.c; \
		fi; \
		$(SED) "2,3d" Configur | ./expfunc | $(SHELL) > config.h; \
	fi


############################################################
# for programer's maintenance

GETVER	= HEAD="`tail -1 version.h`";\
	VER=`expr "$$HEAD" : '.*\([0-9][0-9]*\.[0-9a-z\-]*\).*'`

tar: $(SOURCES)
	($(GETVER);\
	tar cvof $(TITLE)"$$VER".tar $(SOURCES);\
	compress -f $(TITLE)"$$VER".tar)

lzh: $(SOURCES)
	($(GETVER);\
	rm -f $(TITLE)"$$VER".lzh;\
	lha a $(TITLE)"$$VER".lzh $(SOURCES))

shar: $(SOURCES)
	($(GETVER);\
	rm -f $(TITLE)$$VER.shar.[0-9]0-9];\
	shar -L50 -apc -n $(TITLE)"$$VER" -o $(TITLE)"$$VER".shar \
	-C $(JSRCS) -T $(ESRCS))

clean:
	rm -f core *__OBJ__ funcno.h kanji.h
	rm -f kanjicnv__EXE__ mkfuncno__EXE__ expfunc__EXE__
	rm -f $(PROGRAM) $(PROGRAM).$(MANSEC) $(PROGRAM).$(MANSEC)c
	rm -f $(PROGRAM).doc $(ARGS)
# DO NOT DELETE THIS LINE -- make depend depends on it.

main__OBJ__: fd.h machine.h config.h
main__OBJ__: types.h pathname.h term.h
main__OBJ__: func.h kctype.h
main__OBJ__: kanji.h funcno.h version.h
main__OBJ__: dosdisk.h
term__OBJ__: machine.h config.h
term__OBJ__: term.h
pathname__OBJ__: machine.h config.h
pathname__OBJ__: pathname.h
libc__OBJ__: fd.h machine.h config.h
libc__OBJ__: types.h pathname.h term.h
libc__OBJ__: func.h kctype.h
libc__OBJ__: kanji.h
input__OBJ__: fd.h machine.h config.h
input__OBJ__: types.h pathname.h
input__OBJ__: term.h func.h
input__OBJ__: kctype.h kanji.h
shell__OBJ__: fd.h machine.h config.h
shell__OBJ__: types.h pathname.h
shell__OBJ__: term.h func.h
shell__OBJ__: kctype.h kanji.h funcno.h
info__OBJ__: fd.h machine.h config.h
info__OBJ__: types.h pathname.h term.h
info__OBJ__: funcno.h kanji.h
dosdisk__OBJ__: machine.h config.h
dosdisk__OBJ__: dosdisk.h
dosemu__OBJ__: fd.h machine.h config.h
dosemu__OBJ__: types.h pathname.h
dosemu__OBJ__: func.h dosdisk.h
dosemu__OBJ__: kctype.h
unixdisk__OBJ__: unixdisk.h machine.h config.h
unixdisk__OBJ__: unixemu.h
unixemu__OBJ__: fd.h machine.h config.h
unixemu__OBJ__: types.h pathname.h
unixemu__OBJ__: func.h
unixemu__OBJ__: unixdisk.h
unixemu__OBJ__: unixemu.h
rockridg__OBJ__: fd.h machine.h config.h
rockridg__OBJ__: types.h pathname.h
rockridg__OBJ__: func.h
builtin__OBJ__: fd.h machine.h config.h
builtin__OBJ__: types.h pathname.h
builtin__OBJ__: term.h func.h
builtin__OBJ__: kanji.h kctype.h funcno.h dosdisk.h
parse__OBJ__: fd.h machine.h config.h
parse__OBJ__: types.h pathname.h
parse__OBJ__: func.h kctype.h
parse__OBJ__: dosdisk.h
kanji__OBJ__: fd.h machine.h config.h
kanji__OBJ__: types.h pathname.h
kanji__OBJ__: term.h func.h
kanji__OBJ__: kctype.h
file__OBJ__: fd.h machine.h config.h
file__OBJ__: types.h pathname.h term.h
file__OBJ__: func.h kanji.h
file__OBJ__: kctype.h
apply__OBJ__: fd.h machine.h config.h
apply__OBJ__: types.h pathname.h
apply__OBJ__: term.h func.h
apply__OBJ__: kanji.h
archive__OBJ__: fd.h machine.h config.h
archive__OBJ__: types.h pathname.h
archive__OBJ__: term.h func.h
archive__OBJ__: funcno.h kanji.h
tree__OBJ__: fd.h machine.h config.h
tree__OBJ__: types.h pathname.h term.h
tree__OBJ__: func.h kanji.h
command__OBJ__: fd.h machine.h config.h
command__OBJ__: types.h pathname.h
command__OBJ__: term.h func.h
command__OBJ__: kanji.h funcno.h
command__OBJ__: functabl.h
browse__OBJ__: fd.h machine.h config.h
browse__OBJ__: types.h pathname.h
browse__OBJ__: term.h func.h
browse__OBJ__: funcno.h kanji.h
